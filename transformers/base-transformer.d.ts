/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   transformers/base-transformer.js
 *   transformers/base-transformer.js
 *   transformers/base-transformer.js
 *   transformers/base-transformer.js
 *   transformers/base-transformer.js
 *   transformers/base-transformer.js
 *   transformers/base-transformer.js
 *   transformers/base-transformer.js
 */

/**
 * Base class for all transformers.
 * Includes common functions.
 */
declare class BaseTransformer {

  /**
   * Helper for uuid();
   */
  readonly _lut: Array<Number|null>|null;

  /**
   * Executes function in next event loop.
   *
   * @param fn A function to be executed in next event loop.
   */
  deffer(fn: Function|null): void;

  /**
   * Generates request's datastore ID value.
   *
   * @param item A request object property.
   * @param projectId If set it adds project information to the ID.
   * @returns Request ID value.
   */
  generateRequestId(item: object|null, projectId: String|null): String|null;

  /**
   * Generates UUID.
   *
   * @returns UUID.
   */
  uuid(): String|null;

  /**
   * Sets hours, minutes, seconds and ms to 0 and returns timestamp.
   *
   * @param timestamp Day's timestamp.
   * @returns Timestamp to the day.
   */
  getDayToday(timestamp: Number|null): Number|null;

  /**
   * Computes history item ID
   *
   * @param timestamp The timestamp to use
   * @param item History item
   * @returns Datastore ID
   */
  generateHistoryId(timestamp: Number|null, item: object|null): String|null;
}

/**
 * Base class for all transformers.
 * Includes common functions.
 */
declare class BaseTransformer {

  /**
   * Helper for uuid();
   */
  readonly _lut: Array<Number|null>|null;

  /**
   * Executes function in next event loop.
   *
   * @param fn A function to be executed in next event loop.
   */
  deffer(fn: Function|null): void;

  /**
   * Generates request's datastore ID value.
   *
   * @param item A request object property.
   * @param projectId If set it adds project information to the ID.
   * @returns Request ID value.
   */
  generateRequestId(item: object|null, projectId: String|null): String|null;

  /**
   * Generates UUID.
   *
   * @returns UUID.
   */
  uuid(): String|null;

  /**
   * Sets hours, minutes, seconds and ms to 0 and returns timestamp.
   *
   * @param timestamp Day's timestamp.
   * @returns Timestamp to the day.
   */
  getDayToday(timestamp: Number|null): Number|null;

  /**
   * Computes history item ID
   *
   * @param timestamp The timestamp to use
   * @param item History item
   * @returns Datastore ID
   */
  generateHistoryId(timestamp: Number|null, item: object|null): String|null;
}

/**
 * Base class for all transformers.
 * Includes common functions.
 */
declare class BaseTransformer {

  /**
   * Helper for uuid();
   */
  readonly _lut: Array<Number|null>|null;

  /**
   * Executes function in next event loop.
   *
   * @param fn A function to be executed in next event loop.
   */
  deffer(fn: Function|null): void;

  /**
   * Generates request's datastore ID value.
   *
   * @param item A request object property.
   * @param projectId If set it adds project information to the ID.
   * @returns Request ID value.
   */
  generateRequestId(item: object|null, projectId: String|null): String|null;

  /**
   * Generates UUID.
   *
   * @returns UUID.
   */
  uuid(): String|null;

  /**
   * Sets hours, minutes, seconds and ms to 0 and returns timestamp.
   *
   * @param timestamp Day's timestamp.
   * @returns Timestamp to the day.
   */
  getDayToday(timestamp: Number|null): Number|null;

  /**
   * Computes history item ID
   *
   * @param timestamp The timestamp to use
   * @param item History item
   * @returns Datastore ID
   */
  generateHistoryId(timestamp: Number|null, item: object|null): String|null;
}

/**
 * Base class for all transformers.
 * Includes common functions.
 */
declare class BaseTransformer {

  /**
   * Helper for uuid();
   */
  readonly _lut: Array<Number|null>|null;

  /**
   * Executes function in next event loop.
   *
   * @param fn A function to be executed in next event loop.
   */
  deffer(fn: Function|null): void;

  /**
   * Generates request's datastore ID value.
   *
   * @param item A request object property.
   * @param projectId If set it adds project information to the ID.
   * @returns Request ID value.
   */
  generateRequestId(item: object|null, projectId: String|null): String|null;

  /**
   * Generates UUID.
   *
   * @returns UUID.
   */
  uuid(): String|null;

  /**
   * Sets hours, minutes, seconds and ms to 0 and returns timestamp.
   *
   * @param timestamp Day's timestamp.
   * @returns Timestamp to the day.
   */
  getDayToday(timestamp: Number|null): Number|null;

  /**
   * Computes history item ID
   *
   * @param timestamp The timestamp to use
   * @param item History item
   * @returns Datastore ID
   */
  generateHistoryId(timestamp: Number|null, item: object|null): String|null;
}

/**
 * Base class for all transformers.
 * Includes common functions.
 */
declare class BaseTransformer {

  /**
   * Helper for uuid();
   */
  readonly _lut: Array<Number|null>|null;

  /**
   * Executes function in next event loop.
   *
   * @param fn A function to be executed in next event loop.
   */
  deffer(fn: Function|null): void;

  /**
   * Generates request's datastore ID value.
   *
   * @param item A request object property.
   * @param projectId If set it adds project information to the ID.
   * @returns Request ID value.
   */
  generateRequestId(item: object|null, projectId: String|null): String|null;

  /**
   * Generates UUID.
   *
   * @returns UUID.
   */
  uuid(): String|null;

  /**
   * Sets hours, minutes, seconds and ms to 0 and returns timestamp.
   *
   * @param timestamp Day's timestamp.
   * @returns Timestamp to the day.
   */
  getDayToday(timestamp: Number|null): Number|null;

  /**
   * Computes history item ID
   *
   * @param timestamp The timestamp to use
   * @param item History item
   * @returns Datastore ID
   */
  generateHistoryId(timestamp: Number|null, item: object|null): String|null;
}

/**
 * Base class for all transformers.
 * Includes common functions.
 */
declare class BaseTransformer {

  /**
   * Helper for uuid();
   */
  readonly _lut: Array<Number|null>|null;

  /**
   * Executes function in next event loop.
   *
   * @param fn A function to be executed in next event loop.
   */
  deffer(fn: Function|null): void;

  /**
   * Generates request's datastore ID value.
   *
   * @param item A request object property.
   * @param projectId If set it adds project information to the ID.
   * @returns Request ID value.
   */
  generateRequestId(item: object|null, projectId: String|null): String|null;

  /**
   * Generates UUID.
   *
   * @returns UUID.
   */
  uuid(): String|null;

  /**
   * Sets hours, minutes, seconds and ms to 0 and returns timestamp.
   *
   * @param timestamp Day's timestamp.
   * @returns Timestamp to the day.
   */
  getDayToday(timestamp: Number|null): Number|null;

  /**
   * Computes history item ID
   *
   * @param timestamp The timestamp to use
   * @param item History item
   * @returns Datastore ID
   */
  generateHistoryId(timestamp: Number|null, item: object|null): String|null;
}

/**
 * Base class for all transformers.
 * Includes common functions.
 */
declare class BaseTransformer {

  /**
   * Helper for uuid();
   */
  readonly _lut: Array<Number|null>|null;

  /**
   * Executes function in next event loop.
   *
   * @param fn A function to be executed in next event loop.
   */
  deffer(fn: Function|null): void;

  /**
   * Generates request's datastore ID value.
   *
   * @param item A request object property.
   * @param projectId If set it adds project information to the ID.
   * @returns Request ID value.
   */
  generateRequestId(item: object|null, projectId: String|null): String|null;

  /**
   * Generates UUID.
   *
   * @returns UUID.
   */
  uuid(): String|null;

  /**
   * Sets hours, minutes, seconds and ms to 0 and returns timestamp.
   *
   * @param timestamp Day's timestamp.
   * @returns Timestamp to the day.
   */
  getDayToday(timestamp: Number|null): Number|null;

  /**
   * Computes history item ID
   *
   * @param timestamp The timestamp to use
   * @param item History item
   * @returns Datastore ID
   */
  generateHistoryId(timestamp: Number|null, item: object|null): String|null;
}

/**
 * Base class for all transformers.
 * Includes common functions.
 */
declare class BaseTransformer {

  /**
   * Helper for uuid();
   */
  readonly _lut: Array<Number|null>|null;

  /**
   * Executes function in next event loop.
   *
   * @param fn A function to be executed in next event loop.
   */
  deffer(fn: Function|null): void;

  /**
   * Generates request's datastore ID value.
   *
   * @param item A request object property.
   * @param projectId If set it adds project information to the ID.
   * @returns Request ID value.
   */
  generateRequestId(item: object|null, projectId: String|null): String|null;

  /**
   * Generates UUID.
   *
   * @returns UUID.
   */
  uuid(): String|null;

  /**
   * Sets hours, minutes, seconds and ms to 0 and returns timestamp.
   *
   * @param timestamp Day's timestamp.
   * @returns Timestamp to the day.
   */
  getDayToday(timestamp: Number|null): Number|null;

  /**
   * Computes history item ID
   *
   * @param timestamp The timestamp to use
   * @param item History item
   * @returns Datastore ID
   */
  generateHistoryId(timestamp: Number|null, item: object|null): String|null;
}
